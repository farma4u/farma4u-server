generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id        String   @id @default(uuid())
  cpf       String   @unique
  name      String   @map("nome")
  email     String   @unique
  password  String   @map("senha")
  statusId  Int      @map("id_status")
  roleId    Int      @map("id_cargo")
  createdAt DateTime @default(now()) @map("data_de_criacao")
  updatedAt DateTime @default(now()) @updatedAt @map("data_de_atualizacao")

  // Relation
  role   Role   @relation(fields: [roleId], references: [id])
  status Status @relation(fields: [statusId], references: [id])

  @@index(name)
  @@map("usuario")
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String @map("nome")
  translation String @map("traducao")

  // Relation
  users User[]

  @@map("cargo")
}

model Client {
  id                 String   @id @default(uuid())
  cnpj               String   @unique
  corporateName      String   @map("razao_social")
  fantasyName        String   @map("nome_fantasia")
  segment            String   @map("segmento")
  address            String   @map("endereco")
  state              String   @map("estado")
  city               String   @map("cidade")
  managerName        String   @map("nome_do_responsavel")
  managerPhoneNumber String   @map("telefone_do_responsavel")
  managerEmail       String   @map("email_do_responsavel")
  financePhoneNumber String   @map("telefone_do_financeiro")
  lumpSum            Float?   @map("valor_fixo")
  unitValue          Float?   @map("valor_unitario")
  totalSavings       Float    @default(0) @map("economia_total")
  contractUrl        String?  @map("url_do_contrato")
  isHinova           Boolean  @default(false) @map("tem_hinova")
  hinovaToken        String?  @map("token_hinova") @db.VarChar(573)
  statusId           Int      @map("id_status")
  createdAt          DateTime @default(now()) @map("data_de_criacao")
  updatedAt          DateTime @default(now()) @updatedAt @map("data_de_atualizacao")

  // Relation
  status  Status   @relation(fields: [statusId], references: [id])
  members Member[]
  orders  Order[]

  @@index(fantasyName)
  @@map("cliente")
}

model Member {
  id              String   @id @default(uuid())
  clientId        String   @map("id_cliente")
  cpf             String   @unique
  name            String   @map("nome")
  phoneNumber     String?  @map("telefone")
  email           String?
  birthDate       String   @map("data_de_nascimento")
  cep             String
  password        String?  @map("senha")
  createdPassword Boolean  @default(false) @map("criou_senha")
  totalSavings    Float    @default(0) @map("economia_total")
  statusId        Int      @map("id_status")
  isHinova        Boolean  @default(false) @map("hinova")
  createdAt       DateTime @default(now()) @map("data_de_criacao")
  updatedAt       DateTime @default(now()) @updatedAt @map("data_de_atualizacao")

  // Relation
  client                Client                 @relation(fields: [clientId], references: [id])
  status                Status                 @relation(fields: [statusId], references: [id])
  memberFirstAcessCodes MemberFirstAcessCode[]
  orders                Order[]

  @@index(name)
  @@map("associado")
}

model MemberFirstAcessCode {
  memberId        String   @id @map("id_associado")
  firstAccessCode String   @map("codigo_primeiro_acesso")
  createdAt       DateTime @default(now()) @map("data_de_criacao")
  updatedAt       DateTime @default(now()) @updatedAt @map("data_de_atualizacao")

  // Relation
  member Member @relation(fields: [memberId], references: [id])

  @@map("codigo_primeiro_acesso")
}

model Order {
  id           String   @id @default(uuid())
  memberId     String   @map("id_associado")
  clientId     String   @map("id_cliente")
  totalValue   Float    @map("valor_total")
  totalSavings Float    @default(0) @map("economia_total")
  isRecurring  Boolean  @map("compra_recorrente")
  statusId     Int      @map("id_status")
  createdAt    DateTime @default(now()) @map("data_de_criacao")
  updatedAt    DateTime @default(now()) @updatedAt @map("data_de_atualizacao")

  // Relation
  client Client @relation(fields: [clientId], references: [id])
  member Member @relation(fields: [memberId], references: [id])
  status Status @relation(fields: [statusId], references: [id])
  items  Item[]

  @@map("pedido")
}

model Item {
  id            String   @id @default(uuid())
  orderId       String   @map("id_pedido")
  medicineName  String   @map("nome_do_medicamento")
  medicineType  String   @map("tipo_do_medicamento")
  quantity      Int      @map("quantidade")
  listPrice     Float    @map("preco_de_tabela")
  discountPrice Float    @map("preco_com_desconto")
  createdAt     DateTime @default(now()) @map("data_de_criacao")
  updatedAt     DateTime @default(now()) @updatedAt @map("data_de_atualizacao")

  // Relation
  order Order @relation(fields: [orderId], references: [id])

  @@map("item")
}

model Status {
  id          Int    @id @default(autoincrement())
  name        String @map("nome")
  translation String @map("traducao")

  // Relation
  clients Client[]
  members Member[]
  orders  Order[]
  users   User[]

  @@map("status")
}
